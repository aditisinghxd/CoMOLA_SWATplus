# shapes = gauge_point_settings$shape,
just = c('center', 'center'),
legend.col.show = F,
legend.shape.show = F) +
# tm_add_legend(type = 'symbol',
#               col = '#c31619',
#               shape = 1,
#               labels = 'Riparian Buffer',
#               size = 0.25)+
tm_layout(title = 'Riparian\n Buffer')
hedge_map <- tm_shape(basin) +
tm_borders() +
tm_shape(channel) +
tm_lines(col = carto_pal(7, 'Teal')[7], legend.col.show = F) +
tm_shape(res) +
tm_polygons(col = carto_pal(7, 'Teal')[4], border.col = carto_pal(7, 'Teal')[7]) +
tm_shape(hedge) +
tm_polygons(col = '#b2df8a', border.col = '#4e6c39') +
tm_shape(hedge_p) +
tm_symbols(shape = 1, col = '#c31619', size = 0.5,
# palette = gauge_point_settings$color,
# shapes = gauge_point_settings$shape,
just = c('center', 'center'),
legend.col.show = F,
legend.shape.show = F) +
# tm_add_legend(type = 'symbol',
#               col = '#c31619',
#               shape = 6,
#               labels = 'Hedges',
#               size = 0.25)+
tm_layout(title = 'Hedges')
pond_map <- tm_shape(basin) +
tm_borders() +
tm_shape(channel) +
tm_lines(col = carto_pal(7, 'Teal')[7], legend.col.show = F) +
tm_shape(res) +
tm_polygons(col = carto_pal(7, 'Teal')[4], border.col = carto_pal(7, 'Teal')[7]) +
tm_shape(pond) +
tm_polygons(col = 'cadetblue2', border.col = 'cadetblue4') +
tm_shape(pond_p) +
tm_symbols(shape = 1, col = '#c31619', size = 0.5,
# palette = gauge_point_settings$color,
# shapes = gauge_point_settings$shape,
just = c('center', 'center'),
legend.col.show = F,
legend.shape.show = F) +
# tm_add_legend(type = 'symbol',
#               col = '#c31619',
#               shape = 5,
#               labels = 'Retention ponds',
#               size = 0.25)+
tm_layout(title = 'Detention\n ponds')
# Plot of the management scenario layer
lowtillcc_map <- tm_shape(basin) +
tm_borders() +
tm_shape(channel) +
tm_lines(col = carto_pal(7, 'Teal')[7], legend.col.show = F) +
tm_shape(res) +
tm_polygons(col = carto_pal(7, 'Teal')[4], border.col = carto_pal(7, 'Teal')[7]) +
tm_shape(lowtillcc) +
tm_polygons(col = 'burlywood2', border.col = 'burlywood4',
lwd = 0.02) +
# tm_add_legend(type = 'fill',
#               col = 'burlywood3',
#               border.col = carto_pal(7, 'Teal')[7],
#               size = 0.4,
#               labels = 'Low tillage &\n cover crops') +
tm_layout(title = 'Low tillage &\n cover crops') +
tm_compass(size = 1.5, position = 'RIGHT') +
tm_scale_bar(breaks = scale_bar_intervals, text.size = 0.5,
position = 'RIGHT')
# Combine all plot panels to the overview map
overview_map <- tmap_arrange(grassslope_map,
buffer_map,
hedge_map,
pond_map,
lowtillcc_map,
ncol = 2)
# Save the plot
tmap_save(overview_map,
paste0(output_path, '/measure_overview_map.png'),
width = 7,
height = 10.5)
# Save the plot
tmap_save(overview_map,
paste0(output_path, '/measure_overview_map.png'),
width = 7,
height = 10)
length(grassslope)
dim(grassslope)[1]
tm_shape(basin) + #adjust name of map
tm_borders() +
tm_shape(channel) +
tm_lines(col = carto_pal(7, 'Teal')[7], legend.col.show = F) +
tm_shape(res) +
tm_polygons(col = carto_pal(7, 'Teal')[4], border.col = carto_pal(7, 'Teal')[7]) +
tm_shape(grassslope) +
tm_polygons(col = '#b2df8a', border.col = '#4e6c39') +
tm_shape(grassslope_p) +
tm_symbols(shape = 1, col = '#c31619', size = 0.5,
just = c('center', 'center'),
legend.col.show = F,
legend.shape.show = F) +
tm_layout(title = paste0('Grassed\n waterways\n n = ',  #adjust name of measure
dim(grassslope)[1]))
tm_shape(basin) + #adjust name of map
tm_borders() +
tm_shape(channel) +
tm_lines(col = carto_pal(7, 'Teal')[7], legend.col.show = F) +
tm_shape(res) +
tm_polygons(col = carto_pal(7, 'Teal')[4], border.col = carto_pal(7, 'Teal')[7]) +
tm_shape(grassslope) +
tm_polygons(col = '#b2df8a', border.col = '#4e6c39') +
tm_shape(grassslope_p) +
tm_symbols(shape = 1, col = '#c31619', size = 0.5,
just = c('center', 'center'),
legend.col.show = F,
legend.shape.show = F) +
tm_layout(title = paste0('Grassed\n waterways\n n = (',  #adjust name of measure
dim(grassslope)[1], ')'))
tm_shape(basin) + #adjust name of map
tm_borders() +
tm_shape(channel) +
tm_lines(col = carto_pal(7, 'Teal')[7], legend.col.show = F) +
tm_shape(res) +
tm_polygons(col = carto_pal(7, 'Teal')[4], border.col = carto_pal(7, 'Teal')[7]) +
tm_shape(grassslope) +
tm_polygons(col = '#b2df8a', border.col = '#4e6c39') +
tm_shape(grassslope_p) +
tm_symbols(shape = 1, col = '#c31619', size = 0.5,
just = c('center', 'center'),
legend.col.show = F,
legend.shape.show = F) +
tm_layout(title = paste0('Grassed\n waterways\n (n = ',  #adjust name of measure
dim(grassslope)[1], ')'))
## Plot for the locations of nswrm
grassslope_map <- tm_shape(basin) + #adjust name of map
tm_borders() +
tm_shape(channel) +
tm_lines(col = carto_pal(7, 'Teal')[7], legend.col.show = F) +
tm_shape(res) +
tm_polygons(col = carto_pal(7, 'Teal')[4], border.col = carto_pal(7, 'Teal')[7]) +
tm_shape(grassslope) +
tm_polygons(col = '#b2df8a', border.col = '#4e6c39') +
tm_shape(grassslope_p) +
tm_symbols(shape = 1, col = '#c31619', size = 0.5,
just = c('center', 'center'),
legend.col.show = F,
legend.shape.show = F) +
tm_layout(title = paste0('Grassed\n waterways\n (n = ',  #adjust name of measure
dim(grassslope)[1], ')'))       #adjust name of layer
buffer_map <- tm_shape(basin) + #adjust name of map
tm_borders() +
tm_shape(channel) +
tm_lines(col = carto_pal(7, 'Teal')[7], legend.col.show = F) +
tm_shape(res) +
tm_polygons(col = carto_pal(7, 'Teal')[4], border.col = carto_pal(7, 'Teal')[7]) +
tm_shape(buffer) +
tm_polygons(col = '#b2df8a', border.col = '#4e6c39') +
tm_shape(buffer_p) +
tm_symbols(shape = 1, col = '#c31619', size = 0.5,
just = c('center', 'center'),
legend.col.show = F,
legend.shape.show = F) +
tm_layout(title =  paste0('Riparian\n Buffer\n (n = ',  #adjust name of measure
dim(buffer)[1], ')'))         #adjust name of layer
hedge_map <- tm_shape(basin) + #adjust name of map
tm_borders() +
tm_shape(channel) +
tm_lines(col = carto_pal(7, 'Teal')[7], legend.col.show = F) +
tm_shape(res) +
tm_polygons(col = carto_pal(7, 'Teal')[4], border.col = carto_pal(7, 'Teal')[7]) +
tm_shape(hedge) +
tm_polygons(col = '#b2df8a', border.col = '#4e6c39') +
tm_shape(hedge_p) +
tm_symbols(shape = 1, col = '#c31619', size = 0.5,
just = c('center', 'center'),
legend.col.show = F,
legend.shape.show = F) +
tm_layout(title = paste0('Hedges\n (n = ',       #adjust name of measure
dim(hedge)[1], ')'))    #adjust name of layer
pond_map <- tm_shape(basin) + #adjust name of map
tm_borders() +
tm_shape(channel) +
tm_lines(col = carto_pal(7, 'Teal')[7], legend.col.show = F) +
tm_shape(res) +
tm_polygons(col = carto_pal(7, 'Teal')[4], border.col = carto_pal(7, 'Teal')[7]) +
tm_shape(pond) +
tm_polygons(col = 'cadetblue2', border.col = 'cadetblue4') +
tm_shape(pond_p) +
tm_symbols(shape = 1, col = '#c31619', size = 0.5,
just = c('center', 'center'),
legend.col.show = F,
legend.shape.show = F) +
tm_layout(title = paste0('Detention\n ponds\n (n = ',  #adjust name of measure
dim(pond)[1], ')'))           #adjust name of layer
# Plot of the management scenario layer
lowtillcc_map <- tm_shape(basin) + #adjust name of map
tm_borders() +
tm_shape(channel) +
tm_lines(col = carto_pal(7, 'Teal')[7], legend.col.show = F) +
tm_shape(res) +
tm_polygons(col = carto_pal(7, 'Teal')[4], border.col = carto_pal(7, 'Teal')[7]) +
tm_shape(lowtillcc) +
tm_polygons(col = 'burlywood2', border.col = 'burlywood4',
lwd = 0.02) +
tm_layout(title = 'Low tillage &\n cover crops') + #adjust name of measure
tm_compass(size = 1.5, position = 'RIGHT') +
tm_scale_bar(breaks = scale_bar_intervals, text.size = 0.5,
position = 'RIGHT')
# Combine all plot panels to the overview map
overview_map <- tmap_arrange(grassslope_map, #adjust name of maps
buffer_map,
hedge_map,
pond_map,
lowtillcc_map,
ncol = 2)
# Save the plot
tmap_save(overview_map,
paste0(output_path, '/measure_overview_map.png'),
width = 7,
height = 10)
### copy & zip measure outputs ###
# make a copy of selected files and zip them together
# ask to enrico.chiaradia@unimi.it
### USER DEFINED INPUTS ###
# NOTE: use absolute or relative (to the working directory) path as you want
# complete path to your txt folder(template SWAT+ model)
# the same as "project_path" in 1_build_measr.R
txt_path <- 'C:/SWAT+/measr_scenario_simulation_CS1_rev61/txt'
# path to the measure scenario simulations (see measr_scenario_simulation workflow)
# the same as "scen_out" in 2_measr_scenarios.R
# it works also with multicalibration scenarios
scenarios_output_path = 'C:/SWAT+/measr_scenario_simulation_CS1_rev61/scenario_outputs/'
# path to output folder (where to make a copy of the selected files)
# NOTE that, for safety, overwrite is set to FALSE, so you have to manually delete files
# if they already exist
out_path = 'C:/SWAT+/measr_scenario_simulation_CS1_rev61/output_to_send/'
# IMPORTANT NOTE:
# yes, I can do a script that makes also a zip file but ...
# it is faster (no additional libraries) and safer to make it manually so, please,
# *** make a zip file of "out_path" ***
# and name it as your case study code, e.g. CS9_measr_out.zip
### END USER DEFINED INPUTS ###
dir.create(out_path)
files_from_txt = c('time.sim', 'print.prt') # used to get the extreme of the simulation
file.copy(file.path(txt_path, files_from_txt),file.path(out_path, files_from_txt), overwrite = F)
measr_files = list.files(path = txt_path, pattern = "\\.measr$")
file.copy(file.path(txt_path, measr_files), file.path(out_path, measr_files), overwrite = F)
files_from_output = c('basin_crop_yld_aa.txt', # mandatory
'hru_pw_aa.txt','hru_ls_aa.txt','hru_nb_aa.txt','hru.con','hru_agr.txt'#, # mandatory
#'hru_rescarb_aa.txt','hru_scf_aa.txt','hru_scf_aa.txt','hru_soilcarb_aa.txt', # eventually for future devs
#'hru_wb_aa.txt','reservoir_aa.txt','wetland_aa.txt' # eventually for future devs
)
list_out_path =list.dirs(path = scenarios_output_path, full.names = TRUE, recursive = TRUE)
scenarios_output_path
out_path
path
list_out_path
path <-list_out_path[1]
path
list_out_path
path
scenarios_output_path
out_path
gsub(scenarios_output_path, out_path, path)
grain_units <- data.frame('wbar' = 1.163,
'csil' = 1.071,
'wwht' = 1.209,
'wira' = 1.429,
'barl' = 1.163,
'akgs' = 0.682,
'wiry' = 1.174,
'sgbt' = 1)
write.table(grain_units, 'C:/+PAPER_WORK+/Opti-Tool/CoMOLA_CS1_240503/models/SWAT/SPIs/test_gu.txt')
setwd("C:/+PAPER_WORK+/Opti-Tool/CoMOLA_CS1_240503/models/SWAT")
gu <- read.table('./SPIs/test_gu.txt')
View(gu)
source('./SPIs/SPI_gu.R')
### 4 - Calculate indicators ---------------------------------------------------
##
#
# If you want to consider crop yield as an optimization objective, specify
# grain units to normalize the basin wide sum of crop yields by crop-specific
# nutritional values, please specify grain units for relevant crops
# The grain units must be applicable to dry mass!!!
gu <- grain_units()
setwd("C:/+PAPER_WORK+/Opti-Tool/CoMOLA_CS1_240503/models/SWAT")
source('./SPIs/SPI_gu.R')
### 4 - Calculate indicators ---------------------------------------------------
##
#
# If you want to consider crop yield as an optimization objective, specify
# grain units to normalize the basin wide sum of crop yields by crop-specific
# nutritional values, please specify grain units for relevant crops
# The grain units must be applicable to dry mass!!!
gu <- grain_units()
setwd("C:/+PAPER_WORK+/Opti-Tool/CoMOLA_CS1_240503/models/SWAT")
### 1 - Load libraries and functions -------------------------------------------
source('calc_opt_indis.R')
library(data.table)
library(dplyr)
library(purrr)
library(readr)
library(stringr)
ind_hru_mon_wb(path, sw_300, 5, 'agr')
ind_hru_mon_wb(path, 'sw300', 5, 'agr')
### 2 - Define paths -----------------------------------------------------------
wd <- getwd()
txt_path <- paste0(wd,'/txt') # path to SWAT+ model txt folder
ind_hru_mon_wb(txt_path, 'sw300', 5, 'agr')
### 1 - Load libraries and functions -------------------------------------------
source('calc_opt_indis.R')
ind_hru_mon_wb(txt_path, 'sw300', 5, 'agr')
ind_hru_mon_wb(txt_path, 'sw', 5, 'agr')
ind_hru_mon_wb(txt_path, 'sw300', c(5:9), 'agr')
mean(ind_hru_mon_wb(txt_path, 'sw300', c(5:9), 'agr'))
fit4 <- ind_hru_mon_wb(txt_path, 'sw300', c(5:9), 'agr')
View(fit4)
mean(ind_hru_mon_wb(txt_path, 'sw300', c(5:9), 'agr')[1:5])
mean(as.numeric(ind_hru_mon_wb(txt_path, 'sw300', c(5:9), 'agr')))
fit4 <- as.numeric(ind_hru_mon_wb(txt_path, 'sw300', c(5:9), 'agr'))
ind_hru_aa_wb(txt_path, 'basin')[2]
ind_cha_day(path = txt_path,
channel = 'cha0926',
ind = 'Q_low_days',
threshold_lowQ = 0.0344
)
ind_bsn_aa_crp_ha_Y(txt_path, names(grain_units))
ind_bsn_aa_crp(path = txt_path,
crop_sel = names(grain_units),
out_type = "yield",
grain_units = grain_units)
### 4 - Calculate indicators ---------------------------------------------------
##
#
# If you want to consider crop yield as an optimization objective, specify
# grain units to normalize the basin wide sum of crop yields by crop-specific
# nutritional values, please specify grain units for relevant crops
# The grain units must be applicable to dry mass!!!
grain_units <- data.frame('wbar' = 1.163,
'csil' = 1.071,
'wwht' = 1.209,
'wira' = 1.429,
'barl' = 1.163,
'akgs' = 0.682,
'wiry' = 1.174,
'sgbt' = 1)
## Optimisation objective 4: Grain unit sum for the whole basin
fit4 <- ind_bsn_aa_crp(path = txt_path,
crop_sel = names(grain_units),
out_type = "yield",
grain_units = grain_units)[1]
View(fit4)
### 1 - Load libraries and functions -------------------------------------------
source('calc_opt_indis.R')
## Optimisation objective 4: Grain unit sum for the whole basin
fit4 <- ind_bsn_aa_crp(path = txt_path,
crop_sel = names(grain_units),
out_type = "yield",
grain_units = grain_units)[1]
## Optimisation objective 4: Grain unit sum for the whole basin
fit4 <- ind_bsn_aa_crp(path = txt_path,
crop_sel = names(grain_units),
ind = 'grain_units',
grain_units = grain_units)[1]
View(fit4)
ind_cha_day(path = txt_path,
channel = 'cha0926',
ind = 'Q_low_days',
threshold_lowQ = 0.0344)
ind_cha_day(path = txt_path,
channel = 'cha0926',
ind = 'Q_low_days',
threshold_lowQ = 0.0344)[11]
ind_cha_day(path = txt_path,
channel = 'cha0926',
ind = 'Q_low_days',
threshold_lowQ = 0.0344)[12]
setwd("C:/+PAPER_WORK+/Opti-Tool/CoMOLA_CS1_240503/models/SWAT")
### 1 - Load libraries and functions -------------------------------------------
source('calc_opt_indis.R')
library(data.table)
library(dplyr)
library(purrr)
library(readr)
library(stringr)
library(SWATmeasR)
### 2 - Define paths -----------------------------------------------------------
wd <- getwd()
txt_path <- paste0(wd,'/txt') # path to SWAT+ model txt folder
grain_units <- data.frame('wbar' = 1.163,
'csil' = 1.071,
'wwht' = 1.209,
'wira' = 1.429,
'barl' = 1.163,
'akgs' = 0.682,
'wiry' = 1.174,
'sgbt' = 1)
# Define objectives. Please keep the naming syntax with fit1, fit2, ...
## Optimisation objective 1: Pload
fit1 <- ind_cha_aa(path = txt_path,
channel = 'cha0926')[3] * -1 #loads should be minimized
View(fit1)
## Optimisation objective 2: Days with streamflow > lowflow threshold
fit2 <- ind_cha_day(path = txt_path,
channel = 'cha0926',
ind = 'Q_low_days',
threshold_lowQ = 0.0344)[12]
## Optimisation objective 3: Soil water (top 30cm) for period May to June in cropland
fit3 <- mean(as.numeric(ind_hru_mon_wb(path = txt_path,
ind = 'sw300',
period = c(5:6),
area = 'agr')))
ind_bsn_aa_crp_ha_Y(txt_path, names(grain_units))
setwd("C:/+PAPER_WORK+/Opti-Tool/CoMOLA_CS1_240503/models/SWAT")
### 1 - Load libraries and functions -------------------------------------------
source('calc_opt_indis.R')
library(data.table)
library(dplyr)
library(purrr)
library(readr)
library(stringr)
library(SWATmeasR)
### 2 - Define paths -----------------------------------------------------------
wd <- getwd()
txt_path <- paste0(wd,'/txt') # path to SWAT+ model txt folder
### 4 - Calculate indicators ---------------------------------------------------
##
#
# If you want to consider crop yield as an optimization objective, specify
# grain units to normalize the basin wide sum of crop yields by crop-specific
# nutritional values, please specify grain units for relevant crops
# The grain units must be applicable to dry mass!!!
grain_units <- data.frame('wbar' = 1.163,
'csil' = 1.071,
'wwht' = 1.209,
'wira' = 1.429,
'barl' = 1.163,
'akgs' = 0.682,
'wiry' = 1.174,
'sgbt' = 1)
## Optimisation objective 4: Grain unit sum for the whole basin
fit4 <- ind_bsn_aa_crp(path = txt_path,
crop_sel = names(grain_units),
ind = 'grain_units',
grain_units = grain_units)[1]
ind_bsn_aa_crp(path = txt_path,
crop_sel = names(grain_units),
ind = 'grain_units',
grain_units = grain_units)
ind_bsn_aa_crp(path = txt_path,
crop_sel = names(grain_units),
ind = 'grain_units',
grain_units = grain_units)[1]
setwd("F:/mstrauch/CoMOLA_OPTAIN_CS1/models/SWAT")
source('calc_opt_indis.R')
source('calc_spi_indis.R')
source('./economic_model/CS_input_data.R')
library(data.table)
library(dplyr)
library(purrr)
library(readr)
library(stringr)
library(SWATmeasR)
### 2 - Define paths -----------------------------------------------------------
wd <- getwd()
txt_path <- paste0(wd,'/txt') # path to SWAT+ model txt folder
### 3 - Implement measures and run SWAT ---------------------------------
# Load the measR project which is located in the project path.
measr_file <- list.files(path = txt_path, pattern = '.measr$')
load_measr(paste0(txt_path, '/', measr_file))
# assign the data of the measr project with a specific name to the generic
# variable with the name 'measr'
assign('measr', get(gsub('.measr$', '', measr_file)))
# Reset SWAT files
measr$reset()
# Read genome
genome <- read.csv('genom.csv', header=T)
# Define HRUs subject of NSWRM implementation
idx <- which(genome == 2)
# Implement NSWRMs
if(is.integer0(idx) == F){
measr$implement_nswrm(nswrm_id = idx)
measr$write_swat_inputs()
}
setwd("F:/mstrauch/CoMOLA_OPTAIN_CS1/models/SWAT")
source('calc_opt_indis.R')
source('calc_spi_indis.R')
source('./economic_model/CS_input_data.R')
library(data.table)
library(dplyr)
library(purrr)
library(readr)
library(stringr)
library(SWATmeasR)
### 2 - Define paths -----------------------------------------------------------
wd <- getwd()
txt_path <- paste0(wd,'/txt') # path to SWAT+ model txt folder
### 3 - Implement measures and run SWAT ---------------------------------
# Load the measR project which is located in the project path.
measr_file <- list.files(path = txt_path, pattern = '.measr$')
load_measr(paste0(txt_path, '/', measr_file))
load_measr(paste0(txt_path, '/', measr_file))
# assign the data of the measr project with a specific name to the generic
# variable with the name 'measr'
assign('measr', get(gsub('.measr$', '', measr_file)))
cio_ orig <- measr$.data$model_setup$original_inputs$file.cio
cio_orig <- measr$.data$model_setup$original_inputs$file.cio
View(cio_orig)
res <- measr$.data$model_setup$original_inputs$reservoir.res
View(res)
